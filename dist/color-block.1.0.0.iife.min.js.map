{"version":3,"file":"color-block.1.0.0.iife.min.js","sources":["../lib/src/configuration.js","../lib/src/color-parser.js","../lib/src/clipboard.js","../lib/src/color-block.js","../lib/src/color-after-text-attribute.js","../lib/src/color-block-wc.js","../lib/src/template.js"],"sourcesContent":["window.ColorBlockConfiguration = {\n    clipboard: {\n        validColorTitle: (value) => `click to copy value ${value}`,\n        invalidColorTitle: (value) => `${value} is an invalid color - click to copy value`\n    }\n}\n","export class ColorParserBuilder {\n    static ifValid(validCb) {\n        return new ColorParserBuilderIfInvalid(validCb);\n    }\n}\n\nclass ColorParserBuilderIfInvalid {\n    _validCb;\n\n    constructor(validCb) {\n        this._validCb = validCb;\n    }\n\n    ifInvalid(invalidCb) {\n        return new ColorParser(this._validCb, invalidCb);\n    }\n}\n\nclass ColorParser {\n    _validCb;\n    _invalidCb;\n    parsers = [ColorParserHandler.CssVar(), ColorParserHandler.OtherCssColors()];\n\n    constructor(validCb, invalidCb) {\n        this._validCb = validCb;\n        this._invalidCb = invalidCb;\n    }\n\n    parse(value) {\n        const parser = this.parsers.find(parser => parser.handle(value));\n\n        if (parser) {\n            this._validCb(parser.format(value));\n        } else {\n            this._invalidCb(value);\n        }\n    }\n}\n\nclass ColorParserHandler {\n    _handleCb;\n    _parseCb;\n\n    constructor(handleCb, parseCb) {\n        this._handleCb = handleCb;\n        this._parseCb = parseCb;\n    }\n\n    handle(value) {\n        return this._handleCb(value);\n    }\n\n    format(value) {\n        return this._parseCb(value);\n    }\n\n    static CssVar() {\n        return new ColorParserHandler(\n            value => typeof value === 'string' && value.trim().startsWith('--'),\n            value => `var(${value.trim()})`\n        );\n    }\n\n    static OtherCssColors() {\n        return new ColorParserHandler(\n            value => typeof value === 'string' && CSS.supports('color', value.trim()),\n            value => value.trim()\n        );\n    }\n}\n","export class CopyToClipboard {\n\n    _colorBlockEl;\n    _clickListener;\n\n    constructor(colorBlock) {\n        this._colorBlockEl = colorBlock.getElement();\n    }\n\n    bindValid(value) {\n        this._colorBlockEl.setAttribute('title', ColorBlockConfiguration.clipboard.validColorTitle(value));\n        this._bind(value);\n    }\n\n    bindInvalid(value) {\n        this._colorBlockEl.setAttribute('title', ColorBlockConfiguration.clipboard.invalidColorTitle(value));\n        this._bind(value);\n    }\n\n    _bind(value) {\n        this._clickListener = () => this._copyToClipBoard(value);\n        this._colorBlockEl.addEventListener('click', this._clickListener);\n    }\n\n    unbind() {\n        if (this._clickListener) {\n            this._colorBlockEl.removeEventListener('click', this._clickListener);\n            this._clickListener = null;\n        }\n    }\n\n    _clearCopyState() {\n        this._colorBlockEl.classList.remove('copy-success');\n        this._colorBlockEl.classList.remove('copy-failed');\n    }\n\n    _copySuccess() {\n        this._newCopyState('success');\n    }\n\n    _copyFailed() {\n        this._newCopyState('failed');\n    }\n\n    _newCopyState(state) {\n        this._clearCopyState();\n        this._colorBlockEl.classList.add('copy');\n        this._colorBlockEl.classList.add('copy-' + state);\n        setTimeout(() => {\n            this._colorBlockEl.classList.remove('copy');\n            this._colorBlockEl.classList.remove('copy-' + state);\n        }, 500);\n    }\n\n    _copyToClipBoard(color) {\n        navigator.clipboard.writeText(color)\n            .then(() => {\n                this._copySuccess();\n            }, () => {\n                this._copyFailed();\n            });\n    }\n}\n","import {ColorParserBuilder} from './color-parser';\nimport {CopyToClipboard} from './clipboard';\n\nexport class ColorBlock {\n    _htmlEl;\n\n    constructor(htmlEl) {\n        this._htmlEl = htmlEl;\n        this._colorEl = htmlEl.querySelector('.color-block .color');\n\n        this._copyToClipboard = new CopyToClipboard(this);\n        this._colorParser = ColorParserBuilder\n            .ifValid(this._setValidColor.bind(this))\n            .ifInvalid(this._setInvalidColor.bind(this));\n    }\n\n    getElement() {\n        return this._htmlEl;\n    }\n\n    setColor(value) {\n        this._colorParser.parse(value);\n    }\n\n    disconnect() {\n        this._copyToClipboard.unbind();\n    }\n\n    _setValidColor(color) {\n        this._colorEl.style.backgroundColor = color;\n        this._copyToClipboard.bindValid(color);\n    }\n\n    _setInvalidColor(value) {\n        this._colorEl.classList.add('invalid');\n        this._copyToClipboard.bindInvalid(value);\n    }\n}\n","export class ColorAfterTextAttribute {\n    static ATTR_COLOR_AFTER_TEXT = 'color-after-text';\n\n    _shadowRoot;\n    _colorBlockEl;\n\n    constructor(shadowRoot, colorBlock) {\n        this._shadowRoot = shadowRoot;\n        this._colorBlockEl = colorBlock.getElement();\n    }\n\n    onAttributeChanged(name, value) {\n        if (!this._handle(name)) {\n            return;\n        }\n\n        if (value === 'true') {\n            this._shadowRoot.appendChild(this._colorBlockEl);\n        } else {\n            this._shadowRoot.prepend(this._colorBlockEl);\n        }\n    }\n\n    _handle(name) {\n        return name === ColorAfterTextAttribute.ATTR_COLOR_AFTER_TEXT;\n    }\n}\n","import './configuration';\n\nimport {getTemplate} from './template';\nimport {ColorBlock} from './color-block';\nimport {ColorAfterTextAttribute} from './color-after-text-attribute.js';\n\nexport class ColorBlockWebComponent extends HTMLElement {\n\n    static get observedAttributes() {\n        return [ColorAfterTextAttribute.ATTR_COLOR_AFTER_TEXT];\n    }\n\n    _colorText;\n    _colorBlock;\n\n    _colorAfterTextAttribute;\n\n    constructor() {\n        super();\n\n        this._createTemplate();\n        this._bindElements();\n\n        this._colorAfterTextAttribute = new ColorAfterTextAttribute(this.shadowRoot, this._colorBlock);\n    }\n\n    _createTemplate() {\n        this.attachShadow({mode: 'open'});\n        this.shadowRoot.appendChild(getTemplate().content.cloneNode(true));\n    }\n\n    _bindElements() {\n        this._colorText = this.shadowRoot.querySelector('.color-text');\n        this._colorBlock = new ColorBlock(this.shadowRoot.querySelector('.color-block'));\n    }\n\n    connectedCallback() {\n        setTimeout(() => {\n            this._colorText.innerHTML = this.textContent;\n            this._colorBlock.setColor(this.textContent);\n        });\n    }\n\n    disconnectedCallback() {\n        this._colorBlock.disconnect();\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this._colorAfterTextAttribute.onAttributeChanged(name, newValue);\n    }\n}\n\n// Define the new element\ncustomElements.define('color-block', ColorBlockWebComponent);\n","export const getTemplate = () => {\n    const template = document.createElement('template');\n    template.innerHTML = `\n        <style>\n        \n        :host {\n            display: inline-block;\n        }\n        \n        .color-block {\n          position: relative;\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          line-height: 10px;\n          border: 1px solid #444;\n        }\n        \n        .color-block .color {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 10px;\n            height: 10px;\n        }\n        \n        .color-block.copy::after {\n          display: block;\n          position: absolute;\n          top: 0;\n          left: 0;\n          opacity: 0;\n          \n          width: 10px;\n          height: 10px;\n          line-height: 10px;\n          text-align: center;\n          \n          animation-duration: .5s;\n          animation-name: botToTop;\n        }\n        \n        .color-block.copy-success::after {\n          content: '\\\\2713';\n          font-size: 16px;\n          color: green;\n        }\n        \n        .color-block.copy-failed::after {\n          content: '\\\\00D7';\n          font-size: 16px;\n          color: red;\n        }\n        \n        @keyframes botToTop  {\n           0% {\n              top:0;\n              opacity: 0;\n           }\n           \n           50% {\n            opacity: 1;\n           }\n           \n           100% {\n              top:-200%;\n              opacity: 0;\n           }\n        \n        }\n        \n        .color-block .color.invalid {\n            position: relative;\n        }\n        \n        .color-block .color.invalid::before,\n        .color-block .color.invalid::after {\n            position: absolute;\n            content: '';\n            width: 100%;\n            top: 50%;\n            height: 1px;\n            background-color: red;\n        }\n        \n        .color-block .color.invalid::before {\n            transform: rotate(45deg);\n        }\n        \n        .color-block .color.invalid::after {\n            transform: rotate(-45deg);\n        }\n        </style>\n        <span class=\"color-block\">\n            <span class=\"color\"></span>\n            <span class=\"copy\"></span>\n        </span>\n        <span class=\"color-text\"></span>\n        `;\n\n    return template;\n};\n"],"names":["window","ColorBlockConfiguration","clipboard","validColorTitle","value","invalidColorTitle","ColorParserBuilderIfInvalid","_validCb","constructor","validCb","this","ifInvalid","invalidCb","ColorParser","_invalidCb","parsers","ColorParserHandler","CssVar","OtherCssColors","parse","parser","find","handle","format","_handleCb","_parseCb","handleCb","parseCb","static","trim","startsWith","CSS","supports","CopyToClipboard","_colorBlockEl","_clickListener","colorBlock","getElement","bindValid","setAttribute","_bind","bindInvalid","_copyToClipBoard","addEventListener","unbind","removeEventListener","_clearCopyState","classList","remove","_copySuccess","_newCopyState","_copyFailed","state","add","setTimeout","color","navigator","writeText","then","ColorBlock","_htmlEl","htmlEl","_colorEl","querySelector","_copyToClipboard","_colorParser","ifValid","_setValidColor","bind","_setInvalidColor","setColor","disconnect","style","backgroundColor","ColorAfterTextAttribute","_shadowRoot","shadowRoot","onAttributeChanged","name","_handle","appendChild","prepend","ATTR_COLOR_AFTER_TEXT","ColorBlockWebComponent","HTMLElement","observedAttributes","_colorText","_colorBlock","_colorAfterTextAttribute","super","_createTemplate","_bindElements","attachShadow","mode","template","document","createElement","innerHTML","getTemplate","content","cloneNode","connectedCallback","textContent","disconnectedCallback","attributeChangedCallback","oldValue","newValue","customElements","define"],"mappings":"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"}