var colorblock=function(o){"use strict";window.ColorBlockConfiguration={clipboard:{validColorTitle:o=>`click to copy value ${o}`,invalidColorTitle:o=>`${o} is an invalid color - click to copy value`}};class t{_validCb;constructor(o){this._validCb=o}ifInvalid(o){return new l(this._validCb,o)}}class l{_validCb;_invalidCb;parsers=[n.CssVar(),n.OtherCssColors()];constructor(o,t){this._validCb=o,this._invalidCb=t}parse(o){const t=this.parsers.find((t=>t.handle(o)));t?this._validCb(t.format(o)):this._invalidCb(o)}}class n{_handleCb;_parseCb;constructor(o,t){this._handleCb=o,this._parseCb=t}handle(o){return this._handleCb(o)}format(o){return this._parseCb(o)}static CssVar(){return new n((o=>"string"==typeof o&&o.trim().startsWith("--")),(o=>`var(${o.trim()})`))}static OtherCssColors(){return new n((o=>"string"==typeof o&&CSS.supports("color",o.trim())),(o=>o.trim()))}}class i{_colorBlockEl;_clickListener;constructor(o){this._colorBlockEl=o.getElement()}bindValid(o){this._colorBlockEl.setAttribute("title",ColorBlockConfiguration.clipboard.validColorTitle(o)),this._bind(o)}bindInvalid(o){this._colorBlockEl.setAttribute("title",ColorBlockConfiguration.clipboard.invalidColorTitle(o)),this._bind(o)}_bind(o){this._clickListener=()=>this._copyToClipBoard(o),this._colorBlockEl.addEventListener("click",this._clickListener)}unbind(){this._clickListener&&(this._colorBlockEl.removeEventListener("click",this._clickListener),this._clickListener=null)}_clearCopyState(){this._colorBlockEl.classList.remove("copy-success"),this._colorBlockEl.classList.remove("copy-failed")}_copySuccess(){this._newCopyState("success")}_copyFailed(){this._newCopyState("failed")}_newCopyState(o){this._clearCopyState(),this._colorBlockEl.classList.add("copy"),this._colorBlockEl.classList.add("copy-"+o),setTimeout((()=>{this._colorBlockEl.classList.remove("copy"),this._colorBlockEl.classList.remove("copy-"+o)}),500)}_copyToClipBoard(o){navigator.clipboard.writeText(o).then((()=>{this._copySuccess()}),(()=>{this._copyFailed()}))}}class e{_htmlEl;constructor(o){this._htmlEl=o,this._colorEl=o.querySelector(".color-block .color"),this._copyToClipboard=new i(this),this._colorParser=class{static ifValid(o){return new t(o)}}.ifValid(this._setValidColor.bind(this)).ifInvalid(this._setInvalidColor.bind(this))}getElement(){return this._htmlEl}setColor(o){this._colorParser.parse(o)}disconnect(){this._copyToClipboard.unbind()}_setValidColor(o){this._colorEl.style.backgroundColor=o,this._copyToClipboard.bindValid(o)}_setInvalidColor(o){this._colorEl.classList.add("invalid"),this._copyToClipboard.bindInvalid(o)}}class s{static ATTR_COLOR_AFTER_TEXT="color-after-text";_shadowRoot;_colorBlockEl;constructor(o,t){this._shadowRoot=o,this._colorBlockEl=t.getElement()}onAttributeChanged(o,t){this._handle(o)&&("true"===t?this._shadowRoot.appendChild(this._colorBlockEl):this._shadowRoot.prepend(this._colorBlockEl))}_handle(o){return o===s.ATTR_COLOR_AFTER_TEXT}}class c extends HTMLElement{static get observedAttributes(){return[s.ATTR_COLOR_AFTER_TEXT]}_colorText;_colorBlock;_colorAfterTextAttribute;constructor(){super(),this._createTemplate(),this._bindElements(),this._colorAfterTextAttribute=new s(this.shadowRoot,this._colorBlock)}_createTemplate(){this.attachShadow({mode:"open"}),this.shadowRoot.appendChild((()=>{const o=document.createElement("template");return o.innerHTML='\n        <style>\n        \n        :host {\n            display: inline-block;\n        }\n        \n        .color-block {\n          position: relative;\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          line-height: 10px;\n          border: 1px solid #444;\n        }\n        \n        .color-block .color {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 10px;\n            height: 10px;\n        }\n        \n        .color-block.copy::after {\n          display: block;\n          position: absolute;\n          top: 0;\n          left: 0;\n          opacity: 0;\n          \n          width: 10px;\n          height: 10px;\n          line-height: 10px;\n          text-align: center;\n          \n          animation-duration: .5s;\n          animation-name: botToTop;\n        }\n        \n        .color-block.copy-success::after {\n          content: \'\\2713\';\n          font-size: 16px;\n          color: green;\n        }\n        \n        .color-block.copy-failed::after {\n          content: \'\\00D7\';\n          font-size: 16px;\n          color: red;\n        }\n        \n        @keyframes botToTop  {\n           0% {\n              top:0;\n              opacity: 0;\n           }\n           \n           50% {\n            opacity: 1;\n           }\n           \n           100% {\n              top:-200%;\n              opacity: 0;\n           }\n        \n        }\n        \n        .color-block .color.invalid {\n            position: relative;\n        }\n        \n        .color-block .color.invalid::before,\n        .color-block .color.invalid::after {\n            position: absolute;\n            content: \'\';\n            width: 100%;\n            top: 50%;\n            height: 1px;\n            background-color: red;\n        }\n        \n        .color-block .color.invalid::before {\n            transform: rotate(45deg);\n        }\n        \n        .color-block .color.invalid::after {\n            transform: rotate(-45deg);\n        }\n        </style>\n        <span class="color-block">\n            <span class="color"></span>\n            <span class="copy"></span>\n        </span>\n        <span class="color-text"></span>\n        ',o})().content.cloneNode(!0))}_bindElements(){this._colorText=this.shadowRoot.querySelector(".color-text"),this._colorBlock=new e(this.shadowRoot.querySelector(".color-block"))}connectedCallback(){setTimeout((()=>{this._colorText.innerHTML=this.textContent,this._colorBlock.setColor(this.textContent)}))}disconnectedCallback(){this._colorBlock.disconnect()}attributeChangedCallback(o,t,l){this._colorAfterTextAttribute.onAttributeChanged(o,l)}}return customElements.define("color-block",c),o.ColorBlockWebComponent=c,Object.defineProperty(o,"__esModule",{value:!0}),o}({});
//# sourceMappingURL=color-block.1.0.0.es.min.js.map
